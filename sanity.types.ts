/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ReadingList = {
  _id: string;
  _type: "readingList";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  bookTitle?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  alt?: Slug;
  linkUrl?: string;
  category?: "fiction" | "non-fiction" | "self help" | "technology" | "business" | "growth" | "spiritual";
};

export type ReflectionQuestion = {
  _type: "reflectionQuestion";
  question?: string;
};

export type TakeawayJournalingPrompt = {
  _type: "takeawayJournalingPrompt";
  prompt?: string;
};

export type Quote = {
  _type: "quote";
  text?: string;
  author?: string;
};

export type StudySession = {
  _id: string;
  _type: "studySession";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  quotes?: Array<{
    _key: string;
  } & Quote>;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  activity?: Activity;
  rolePlay?: RolePlay;
  summaryBox?: SummaryBox;
  takeawayJournalingPrompts?: Array<{
    _key: string;
  } & TakeawayJournalingPrompt>;
};

export type SummaryBox = {
  _type: "summaryBox";
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type RolePlay = {
  _type: "rolePlay";
  title?: string;
  scenario?: string;
  instructions?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  variation?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  reflectionPrompt?: string;
};

export type Activity = {
  _type: "activity";
  title?: string;
  instructions?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  reflectionPrompt?: string;
};

export type Module = {
  _id: string;
  _type: "module";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  studySessions?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "studySession";
  }>;
};

export type Course = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  modules?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "module";
  }>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = ReadingList | ReflectionQuestion | TakeawayJournalingPrompt | Quote | StudySession | SummaryBox | RolePlay | Activity | Module | Course | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/courses/getCourses.ts
// Variable: getCoursesQuery
// Query: *[_type == "course"] {        ...,        "slug": slug.current,        "description": description.current,        "modules": modules[]->{...},        "studySession": studySession[]->{...},        }
export type GetCoursesQueryResult = Array<{
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  description: null;
  modules: Array<{
    _id: string;
    _type: "module";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    description?: string;
    studySessions?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "studySession";
    }>;
  }> | null;
  studySession: null;
}>;

// Source: sanity/lib/courses/getCoursesBySlug.ts
// Variable: getCourseByExactSlugQuery
// Query: *[_type == "course" && slug.current == $slug][0]{      _id,      title,      "slug": slug.current,      description,      modules[]-> {        ..., // Keep other fields from the module document        _id,        _key,        title,        description,     studySessions[]{  _id,  _key,  title,  content,  activity { _id, title, instructions, reflectionPrompt },  rolePlay { _id, title, scenario, instructions },  summaryBox { _id, content },  takeawayJournalingPrompts[] { _id, prompt },  quotes[] { _id, text, author }  }  }    }
export type GetCourseByExactSlugQueryResult = {
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | null;
  modules: Array<{
    _id: string;
    _type: "module";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title: string | null;
    slug?: Slug;
    description: string | null;
    studySessions: Array<{
      _id: null;
      _key: string;
      title: null;
      content: null;
      activity: null;
      rolePlay: null;
      summaryBox: null;
      takeawayJournalingPrompts: null;
      quotes: null;
    }> | null;
    _key: null;
  }> | null;
} | null;

// Source: sanity/lib/readingList/getReadindList.ts
// Variable: getReadingListQuery
// Query: *[_type == "readingList"] {    _id,    bookTitle,    description,    image {      asset -> {        url      }    },    alt,    linkUrl,    category,    _createdAt  }
export type GetReadingListQueryResult = Array<{
  _id: string;
  bookTitle: string | null;
  description: string | null;
  image: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  alt: Slug | null;
  linkUrl: string | null;
  category: "business" | "fiction" | "growth" | "non-fiction" | "self help" | "spiritual" | "technology" | null;
  _createdAt: string;
}>;

// Source: sanity/lib/readingList/getReadingListCategories.ts
// Variable: getCategoriesQuery
// Query: *[_type == "readingList" && defined(category)] {    category  }
export type GetCategoriesQueryResult = Array<{
  category: "business" | "fiction" | "growth" | "non-fiction" | "self help" | "spiritual" | "technology" | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"course\"] {\n        ...,\n        \"slug\": slug.current,\n        \"description\": description.current,\n        \"modules\": modules[]->{...},\n        \"studySession\": studySession[]->{...},\n        }": GetCoursesQueryResult;
    "*[_type == \"course\" && slug.current == $slug][0]{\n      _id,\n      title,\n      \"slug\": slug.current,\n      description,\n      modules[]-> {\n        ..., // Keep other fields from the module document\n        _id,\n        _key,\n        title,\n        description,\n     studySessions[]{\n  _id,\n  _key,\n  title,\n  content,\n  activity { _id, title, instructions, reflectionPrompt },\n  rolePlay { _id, title, scenario, instructions },\n  summaryBox { _id, content },\n  takeawayJournalingPrompts[] { _id, prompt },\n  quotes[] { _id, text, author }\n  }\n  }\n    }": GetCourseByExactSlugQueryResult;
    "*[_type == \"readingList\"] {\n    _id,\n    bookTitle,\n    description,\n    image {\n      asset -> {\n        url\n      }\n    },\n    alt,\n    linkUrl,\n    category,\n    _createdAt\n  }\n": GetReadingListQueryResult;
    "*[_type == \"readingList\" && defined(category)] {\n    category\n  }": GetCategoriesQueryResult;
  }
}
